@page "/dynamic"
@using Jinget.Blazor.Components.DropDownList
@using Jinget.Blazor.Components.DynamicComponent
@using Jinget.Blazor.Components.Table
@using Jinget.Blazor.Components.Popup
@using Jinget.Blazor.Models
@using Jinget.Blazor.Services
@using Jinget.Blazor.Attributes
@using Jinget.Blazor.Attributes.Input
@using Jinget.Blazor.Attributes.Picker
@using Jinget.Blazor.Services.Contracts
@using MudBlazor;
@using Jinget.Core.Enumerations;
@using Jinget.Core.ExtensionMethods.Collections;
@using Jinget.Blazor.Components.Picker
@using static Jinget.Blazor.Test.SampleModel

@inject IJSRuntime js;

<JingetMessageBox @ref=@messageBox
                  ShowVerboseFuncAsync=@(async ()=>await Task.FromResult<bool>(true))></JingetMessageBox>
<hr />
<JingetDynamicForm Model=@Model1></JingetDynamicForm>
<MudButton FullWidth=true
           OnClick="Submit1"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Submit</MudText>
</MudButton>
<hr />
<JingetDynamicForm @ref=dynamicForm Model=@Model OnFieldReady="OnFieldReady"></JingetDynamicForm>

<MudButton FullWidth=true
           OnClick="Submit"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Submit</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="SetValue"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Set Value</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="ViewElements"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>View Form elements</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="FindType"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Find by type</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="FindId"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Find by id</MudText>
</MudButton>

@code {
    JingetDynamicForm<SampleModel> dynamicForm;
    Guid[] guids = [Guid.NewGuid(), Guid.NewGuid(), Guid.NewGuid()];
    public async Task OnFieldReady(JingetDynamicField field)
    {
        if (field.Attribute is JingetDropDownListElement && field.Binding != null && field.Binding.Name == nameof(SampleModel.Status2))
        {
            ((JingetDropDownList)field.RefObject).Items = await new JingetDropDownListElement().BindAsync<StatusGuidModel, string>(
                async () =>
                 await Task.FromResult(new List<StatusGuidModel> {
                     new() { Code = guids[0].ToString(), Title = "Active" },
                     new() { Code = guids[1].ToString(), Title = "Deactive" },
                     new() { Code = guids[2].ToString(), Title = "Unknown" } })
            );
        }
        await Task.CompletedTask;
    }

    public class InquiryByDateFromViewModel
    {
        [Attributes.Picker.JingetDateRangePickerElement(DisplayName = "تاریخ", HasLabel = false, Culture = "fa-IR")]
        public SelectedDateRangeModel? Date { get; set; }
    }

    JingetMessageBox? messageBox;
    public InquiryByDateFromViewModel? Model1 { get; set; }

    public SampleModel? Model { get; set; }

    protected override void OnInitialized()
    {
        Model = new();
        Model1 = new();
    }

    async Task Submit1()
    {
        await messageBox.ShowInfoAsync(Model1.Date == null ? "" : Model1.Date.ToString(), "", Newtonsoft.Json.JsonConvert.SerializeObject(Model1));
    }
    async Task Submit()
    {
        await messageBox.ShowInfoAsync(Model.Name, $"{Model.Name} {Model.LastName}", Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    }
    async Task SetValue()
    {
        dynamicForm.Model.Status = 1;
        dynamicForm.Model.Status2 = guids[2].ToString();
        dynamicForm.Model.LastName = "Farahmandian";
        await messageBox.ShowInfoAsync(Model.Name, $"{Model.Name} {Model.LastName}", Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    }
    async Task ViewElements()
    {
        var result = dynamicForm.DynamicFields.Select(x => new
        {
            x.Attribute,
            x.Value,
            x.Id,
            x.Binding?.Name
        });
        await messageBox.ShowInfoAsync("Elements on page", "",
        Newtonsoft.Json.JsonConvert.SerializeObject(new { result },
            new Newtonsoft.Json.JsonSerializerSettings
                {
                    ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
                }));
    }
    async Task FindType()
    {
        var fields = dynamicForm.FindElement<JingetDropDownListElement>();
        var result = fields.Select(x => new
        {
            x.Attribute,
            x.Value,
            x.Id,
            x.Binding?.Name
        });
        await messageBox.ShowInfoAsync("Elements on page", "",
        Newtonsoft.Json.JsonConvert.SerializeObject(new { Fields = result },
        new Newtonsoft.Json.JsonSerializerSettings
            {
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
            }));
    }

    async Task FindId()
    {
        var fields = dynamicForm.FindElement("cmbSearch");
        var result = fields.Select(x => new
        {
            x.Attribute,
            x.Value,
            x.Id,
            x.Binding?.Name
        });
        await messageBox.ShowInfoAsync("Elements on page", "",
        Newtonsoft.Json.JsonConvert.SerializeObject(new { Fields = result },
        new Newtonsoft.Json.JsonSerializerSettings
            {
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
            }));
    }
}