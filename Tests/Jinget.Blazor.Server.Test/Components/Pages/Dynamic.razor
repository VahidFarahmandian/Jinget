@page "/dynamic"
@using Jinget.Blazor.Attributes.DropDownList
@using Jinget.Blazor.Components.DropDownList
@using Jinget.Blazor.Components.DropDownList.DropDownListTree
@using Jinget.Blazor.Components.DynamicComponent
@using Jinget.Blazor.Attributes
@using Jinget.Blazor.Components.Popup
@using MudBlazor
@using static Jinget.Blazor.Test.SampleModel

@inject IJSRuntime js;

<JingetMessageBox @ref=@messageBox
                  ShowVerboseFuncAsync=@(async ()=>await Task.FromResult<bool>(true))></JingetMessageBox>

<JingetDynamicForm @ref=dynamicForm Model=@Model OnFieldReady="OnFieldReady"></JingetDynamicForm>

<MudButton FullWidth=true
           OnClick="Submit"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Submit</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="SetValue"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Set Value</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="ViewElements"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>View Form elements</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="FindType"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Find by type</MudText>
</MudButton>
<MudButton FullWidth=true
           OnClick="FindId"
           Variant="Variant.Filled"
           Color="Color.Primary">
    <MudText>Find by id</MudText>
</MudButton>

@code {
    JingetDynamicForm<SampleModel> dynamicForm;
    Guid[] guids = [Guid.NewGuid(), Guid.NewGuid(), Guid.NewGuid()];
    public async Task OnFieldReady(JingetDynamicFieldBase field)
    {
        if (field.Attribute is JingetDropDownListElement && field.Binding != null && field.Binding.Name == nameof(SampleModel.Status2))
        {
            ((JingetDropDownList)field.RefObject).Items = await new JingetDropDownListElement().BindAsync<StatusGuidModel, string>(
                async () =>
                 await Task.FromResult(new List<StatusGuidModel> {
                     new() { Id = guids[0].ToString(), Title = "Active" },
                     new() { Id = guids[1].ToString(), Title = "Deactive" },
                     new() { Id = guids[2].ToString(), Title = "Unknown" } })
            );
        }
        else if (field.Attribute is JingetDropDownListTreeElement && field.Binding != null && field.Binding.Name == nameof(SampleModel.Department))
        {
            ((JingetDropDownListTree)field.RefObject).Items =
            await new JingetDropDownListTreeElement().BindAsync<DepartmentModel, int>(
                async () =>
                 await Task.FromResult(new List<DepartmentModel> {
                    new() { Id = 1, ParentId = null, Title = "IT" },
                    new() { Id = 2, ParentId = null, Title = "Finance" },
                    new() { Id = 3, ParentId= 1, Title = "Software" },
                    new() { Id = 4, ParentId= 1, Title = "Hardware" },
                    new() { Id = 5, ParentId= 2, Title = "HQ" }
                             })
            );
            // await ((JingetDropDownListTree)field.RefObject).DataBindAsync();
        }
        await Task.CompletedTask;
    }

    JingetMessageBox? messageBox;

    public SampleModel? Model { get; set; }

        protected override void OnInitialized() => Model = new();

        async Task Submit() => await messageBox.ShowInfoAsync(Model.Name, $"{Model.Name} {Model.LastName}", Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        async Task SetValue()
    {
        dynamicForm.Model.Status = 1;
        dynamicForm.Model.Status2 = guids[2].ToString();
        dynamicForm.Model.Department = new Random().Next(1, 5);
        dynamicForm.Model.LastName = "Farahmandian";
        await messageBox.ShowInfoAsync(Model.Name, $"{Model.Name} {Model.LastName}", Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    }
    async Task ViewElements()
    {
        var result = dynamicForm.DynamicFields.Select(x => new
        {
            x.Attribute,
            x.Value,
            x.Id,
            x.Binding?.Name
        });
        await messageBox.ShowInfoAsync("Elements on page", "",
        Newtonsoft.Json.JsonConvert.SerializeObject(new { result },
            new Newtonsoft.Json.JsonSerializerSettings
                {
                    ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
                }));
    }
    async Task FindType()
    {
        var fields = dynamicForm.FindElement<JingetDropDownListElement>();
        var result = fields.Select(x => new
        {
            x.Attribute,
            x.Value,
            x.Id,
            x.Binding?.Name
        });
        await messageBox.ShowInfoAsync("Elements on page", "",
        Newtonsoft.Json.JsonConvert.SerializeObject(new { Fields = result },
        new Newtonsoft.Json.JsonSerializerSettings
            {
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
            }));
    }

    async Task FindId()
    {
        var fields = dynamicForm.FindElement("cmbSearch");
        var result = fields.Select(x => new
        {
            x.Attribute,
            x.Value,
            x.Id,
            x.Binding?.Name
        });
        await messageBox.ShowInfoAsync("Elements on page", "",
        Newtonsoft.Json.JsonConvert.SerializeObject(new { Fields = result },
        new Newtonsoft.Json.JsonSerializerSettings
            {
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore,
            }));
    }
}