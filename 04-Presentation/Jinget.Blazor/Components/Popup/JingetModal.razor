@using Jinget.Blazor.Components.Popup;
@inject IJSRuntime JS;
@inherits JingetPopupBase

<div id="@Id" class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-scrollable modal-lg" role="document">
        <div class='modal-content @(Rtl?"rtl":"ltr")'>
            @if (ShowHeader)
            {
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    @if (ShowCloseOnHeader)
                    {
                        <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" onclick=@CloseAsync></button>
                    }
                </div>
            }
            <div class="modal-body">
                @ChildContent
            </div>
            @if (ShowFooter)
            {
                <div class="modal-footer">
                    <button type="button" class="@CloseButtonCss" data-dismiss="modal" aria-label="Close" onclick=@CloseAsync>@CloseButtonText</button>
                    @FooterContent
                </div>
            }

        </div>
    </div>
</div>

@code {

    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowFooter { get; set; } = true;
    [Parameter] public string? Title { get; set; }

    [Parameter] public string? CloseButtonCss { get; set; } = "btn btn-secondary";
    [Parameter] public bool ShowCloseOnHeader { get; set; } = true;

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? FooterContent { get; set; }

    public async Task OpenAsync()
    {
        await JS.InvokeVoidAsync("toggleModal", new
        {
            dotnet = DotNetObjectReference.Create(this),
            Id,
            show = true
        });
        await OnOpen.InvokeAsync();
    }

    public async Task CloseAsync()
    {
        await JS.InvokeVoidAsync("toggleModal", new
        {
            dotnet = DotNetObjectReference.Create(this),
            Id,
            show = false
        });
        await OnClose.InvokeAsync();
    }
}