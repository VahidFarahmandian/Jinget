@using Jinget.Blazor.Components.List
@using Jinget.Blazor.Components.Other
@using Jinget.Blazor.Enums
@using Jinget.Core.ExtensionMethods.Enums
@using Newtonsoft.Json.Linq
@using Jinget.Blazor.Components.Popup

@inherits JingetPopupBase

<JingetModal @ref="@modal"
             Title=@Title
             CloseButtonText=@CloseButtonText
             Rtl=@Rtl
             OnOpen="OnOpenCallback"
             OnClose="OnCloseCallback">
    <ChildContent>
        @if (IsFancy)
        {
            <div class="alert alert-@(Theme.GetDescription())" role="alert">
                @((MarkupString)Content)
            </div>
        }
        else
        {
            @Content
        }

        <JingetJsonVisualizer @ref=@JsonVisualizer></JingetJsonVisualizer>
        <JingetList ShowTitle=false
                    Model=@verboseItems>
        </JingetList>
    </ChildContent>
</JingetModal>

@code {

    JingetModal modal { get; set; } = new JingetModal();
    JingetJsonVisualizer? JsonVisualizer { get; set; }

    string? Title { get; set; }
    string? Content { get; set; }
    IList<ListItem>? verboseItems { get; set; }
    bool IsFancy { get; set; }
    Severity Theme { get; set; }

    [Parameter] public Func<Task<bool>>? ShowVerboseFuncAsync { get; set; }

    /// <param name="title">message box title</param>
    /// <param name="content">message box body content in string</param>
    /// <param name="verboseContent">message box detailed description text in body</param>
    // /// <param name="verboseEligibleRole">which users are eligible to view the <paramref name="verboseContent"/></param>
    /// <param name="verboseKey">if <paramref name="verboseContent"/> is a json string, then <paramref name="verboseKey"/> defines the key in which its content should be parsed as <paramref name="verboseContent"/></param>
    /// <param name="theme"></param>
    /// <param name="isFancy"></param>
    public async Task OpenAsync(
        string title = "",
        string content = "",
        string verboseContent = "",
        string verboseKey = "error",
        Severity theme = Severity.Warning,
        bool isFancy = true)
    {

        this.Title = title;
        this.Content = content;
        if (verboseItems != null)
            verboseItems.Clear();
        if (!string.IsNullOrWhiteSpace(verboseContent))
        {
            verboseItems = new List<ListItem>();

            var shouldShowVerbose = ShowVerboseFuncAsync == null ? false : (await ShowVerboseFuncAsync.Invoke());

            if (shouldShowVerbose)
            {
                if (
                    Jinget.Core.Utilities.Json.JsonUtility.IsValid(verboseContent) &&
                    JObject.Parse(verboseContent).ContainsKey(verboseKey))
                {
                    verboseItems.Add(new ListItem(
                        JObject.Parse(verboseContent)[verboseKey]?.ToString(),
                        "list-group-item list-group-item-danger"
                    ));
                }
                else
                if (Jinget.Core.Utilities.Json.JsonUtility.IsValid(verboseContent))
                {
                    if (JsonVisualizer != null)
                        await JsonVisualizer.Visualize(verboseContent);
                }
                else
                {
                    try
                    {
                        if (JsonVisualizer != null)
                            await JsonVisualizer.Visualize(verboseContent);
                    }
                    catch { }
                    verboseItems.Add(new ListItem(verboseContent, "list-group-item list-group-item-danger"));
                }
            }
        }

        Theme = theme;
        IsFancy = isFancy;
        await modal.OpenAsync();
        StateHasChanged();
        // await InvokeAsync(StateHasChanged);
    }

    public async Task CloseAsync()
    {
        await modal.CloseAsync();
        StateHasChanged();
        // await InvokeAsync(StateHasChanged);
    }

    public async Task ShowErrorAsync(
        string title = "",
        string content = "",
        string verboseContent = "",
        bool isFancy = true,
        bool rtl = true)
    {
        Rtl = rtl;
        await OpenAsync(title, content, verboseContent, theme: Severity.Error, isFancy: isFancy);
    }

    public async Task ShowWarningAsync(
        string title = "",
        string content = "",
        string verboseContent = "",
        bool isFancy = true,
        bool rtl = true)
    {
        Rtl = rtl;
        await OpenAsync(title, content, verboseContent, theme: Severity.Warning, isFancy: isFancy);
    }

    public async Task ShowInfoAsync(
        string title = "",
        string content = "",
        string verboseContent = "",
        bool isFancy = true,
        bool rtl = true)
    {
        Rtl = rtl;
        await OpenAsync(title, content, verboseContent, theme: Severity.Info, isFancy: isFancy);
    }
    async Task OnOpenCallback() => await OnOpen.InvokeAsync();

    async Task OnCloseCallback() => await OnClose.InvokeAsync();
}