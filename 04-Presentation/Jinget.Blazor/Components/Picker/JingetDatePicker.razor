@using Jinget.Blazor.Components.Picker.CultureService
@using Microsoft.JSInterop
@using MudBlazor;
@inherits JingetDatePickerBase;

<MudDatePicker id=@Id @ref=_datePicker
               Date=@SelectedDate
               DateChanged=@DateChangedAsync
               Culture=@CalendarService.GetCulture(Culture)
               Editable=@Editable
               ImmediateText=false
               Clearable=@Clearable
               MinDate=@MinDate
               MaxDate=@MaxDate
               Placeholder=@Label
               AdditionalDateClassesFunc=@CustomDateStyleFunc
               IsDateDisabledFunc=@DisabledDateFunc
               Disabled=@IsDisabled
               ReadOnly=@IsReadOnly
               Required=@IsRequired
               RequiredError=@RequiredError
               PickerOpened=@OnOpen
               TitleDateFormat=@DateFormat
               DateFormat=@DateFormat
               Margin="Margin.None"
               data-dir=@(IsRtl ? "rtl" : "ltr")
               Mask=@(Editable ? new DateMask(DateFormat) : null)>
</MudDatePicker>

@code {
    MudDatePicker? _datePicker;

    [Parameter] public override string Label { get; set; } = "تاریخ";

    public override object? Value
    {
        get => throw new Exception();
        set => throw new Exception();
    }

    private DateTime? _selectedDate;

    /// <summary>
    /// Component's value. This property is two-way bindable
    /// </summary>
    [Parameter]
    public virtual DateTime? SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (_selectedDate == value) return;
            _selectedDate = value;
            SelectedDateChanged.InvokeAsync(value);
        }
    }

    /// <summary>
    /// Call callback whenever the <see cref="SelectedDate"/> is changed.
    /// </summary>
    [Parameter]
    public virtual EventCallback<DateTime?> SelectedDateChanged { get; set; }

    async Task DateChangedAsync(DateTime? e) => await SelectedDateChanged.InvokeAsync(e);

    async Task OnOpen()
    {
        if (SelectedDate != null)
        {
            await _datePicker.GoToDate(Convert.ToDateTime(SelectedDate));
        }

        await JS.InvokeVoidAsync("gotoDate", Id, Culture.ToLower() == "fa-ir");
    }

}