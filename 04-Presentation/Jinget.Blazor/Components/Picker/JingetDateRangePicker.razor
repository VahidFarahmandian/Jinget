@using Jinget.Blazor.Components.Picker.CultureService
@using Microsoft.JSInterop
@using MudBlazor
@inherits JingetDatePickerBase;

<MudDateRangePicker @ref=@_dateRangePicker
                    id="@Id"
                    DateRange=@SelectedDateRange
                    Disabled=@IsDisabled
                    ReadOnly=@IsReadOnly
                    
                    Placeholder="@Label"
                    Editable=false
                    ImmediateText=false
                    Clearable=@Clearable
                    MinDate=@MinDate
                    MaxDate=@MaxDate
                    Required=@IsRequired
                    RequiredError="@RequiredError"
                    Culture=@CalendarService.GetCulture(Culture)
                    TitleDateFormat=@DateFormat
                    DateFormat=@DateFormat
                    Mask=@(Editable ? new DateMask(DateFormat) : null)
                    AdditionalDateClassesFunc=@CustomDateStyleFunc
                    IsDateDisabledFunc=@DisabledDateFunc
                    DateRangeChanged=@DateRangeChangedAsync
                    data-dir=@(IsRtl ? "rtl" : "ltr")
                    PickerOpened=@OnOpenAsync/>

@code {
    MudDateRangePicker? _dateRangePicker;

    [Parameter] public override string Label { get; set; } = "بازه تاریخی";

    public override object? Value
    {
        get => throw new Exception();
        set => throw new Exception();
    }

    private DateRange? _selectedDateRange;

    /// <summary>
    /// Component's value. This property is two-way bindable
    /// </summary>
    [Parameter]
    public virtual DateRange? SelectedDateRange
    {
        get => _selectedDateRange;
        set
        {
            if (_selectedDateRange == value) return;
            _selectedDateRange = value;
            SelectedDateRangeChanged.InvokeAsync(ToDateRangeModel(value));
        }
    }

    /// <summary>
    /// Call callback whenever the <see cref="SelectedDate"/> is changed.
    /// </summary>
    [Parameter]
    public virtual EventCallback<SelectedDateRangeModel> SelectedDateRangeChanged { get; set; }

    async Task DateRangeChangedAsync(DateRange e) => await SelectedDateRangeChanged.InvokeAsync(ToDateRangeModel(e));

    async Task OnOpenAsync() => await JS.InvokeVoidAsync("gotoDate", Id, Culture.ToLower() == "fa-ir");

    SelectedDateRangeModel ToDateRangeModel(DateRange? range)
    {
        return new SelectedDateRangeModel
        {
            DateRange = range,
            StartDateJalali = range == null ? null : DateTimeUtility.ToSolarDate(range.Start),
            EndDateJalali = range == null ? null : DateTimeUtility.ToSolarDate(range.End)
        };
    }

}