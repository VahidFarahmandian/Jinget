@using Jinget.Core.ExtensionMethods
@using Microsoft.AspNetCore.Components.Forms
@inherits JingetDropDownListBase;

@if (connected)
{
    @if (!string.IsNullOrWhiteSpace(DisplayName))
    {
        <label for="@Id" class="jinget-element-label @LabelCssClass">@DisplayName</label>
    }
    <select id="@Id"
            class="@CssClass"
            disabled="@IsDisabled"
            required="@IsRequired">
        <option value="">@DefaultText</option>
        @foreach (var item in Items)
        {
            bool selected = item.Value != null && Value != null && item.Value.ToString().Equals(Value.ToString());
            <option value="@item.Value" selected="@selected">@item.Text</option>
        }
    </select>
    @if (IsRequired && !HasSelectedValue())
    {
        <label style="color:red">@RequiredError</label>
    }
}
@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_initialized)
        {
            //initialize drop down list by calling initJingetDropDownList. this functionality is mainly powered by select2.js library.
            await InitComponentAsync("initJingetDropDownList");
            await base.OnAfterRenderAsync(firstRender);
        }
        if (Value == null || Value.HasDefaultValue())
        {
            await JS.InvokeVoidAsync("jinget_blazor_dropdownlist_clear", Id);
        }
        else
        {
            await JS.InvokeVoidAsync("jinget_blazor_dropdownlist_selectItem", Id, Value);
        }
    }
}