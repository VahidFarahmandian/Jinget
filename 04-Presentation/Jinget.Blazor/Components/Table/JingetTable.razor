@using Jinget.Blazor.Attributes
@using Jinget.Blazor.Services
@using MudBlazor
@using System.Reflection
@using Microsoft.JSInterop
@using Jinget.Core.Utilities.Expressions;
@inject IJSRuntime JS;

@typeparam T
<MudTable @ref=table
          Items="Model?.Items"
          ServerData="@ServerReload"
          Hover="true"
          Class=@(Rtl?"rtl":"ltr")>
    <ToolBarContent>
        @if (ShowSearchBar)
        {
                        <div class="@SearchBarDivCss">
                        <MudTextField Clearable=true T="string" ValueChanged="@(s=>OnSearch(s))"
                                      Placeholder=@SearchPlaceHolderText
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      IconSize="MudBlazor.Size.Medium"></MudTextField>
                @if (SearchBarContent != null)
                {
                                              <div class="@SearchBarContentDivCss">
                        @SearchBarContent
                                                  </div>
                }
                        </div>
        }
    </ToolBarContent>
    <NoRecordsContent>
        <div class="@NoRecordDivCss">
            @NoRecordText
            </div>
            </NoRecordsContent>
    <HeaderContent>
        <div class="@HeaderRowDivCss">
            @foreach (var item in columns)
            {
                            <MudTh>
                                <MudTableSortLabel T=T
                                    Enabled=@item.Sortable
                                    SortLabel=@item.Name>
                        @item.DisplayText
                                    </MudTableSortLabel>
                                    </MudTh>
            }
            @if (ActionContent != null)
            {
                            <MudTh></MudTh>
            }
        </div>
    </HeaderContent>
    <RowTemplate>
        <div class="@DataRowDivCss">
            @foreach (var cell in columns)
            {
                            <MudTd DataLabel="@cell.Name">@context?.GetType().GetProperty(cell.Name)?.GetValue(context)</MudTd>
            }
            @if (ActionContent != null)
            {
                        <div class="@ActionContentDivCss">
                        <MudTd>@ActionContent(context)</MudTd>
                        </div>
            }
        </div>
    </RowTemplate>
    <PagerContent>
        @if (ShowPagination)
        {
                        <div class="@PagerContentDivCss" id=@id>
                            <MudTablePager AllItemsText=@PaginationSetting.AllItemsText
                                           HorizontalAlignment=@PaginationSetting.HorizontalAlignment
                                           RowsPerPageString=@PaginationSetting.RowsPerPageString
                                           InfoFormat=@PaginationSetting.InfoFormat />
                        </div>
        }
    </PagerContent>

</MudTable>

@code {
    string id = Guid.NewGuid().ToString("N");

    [Parameter] public TableData<T>? Model { get; set; }
    [Parameter] public bool ShowSearchBar { get; set; } = true;
    [Parameter] public bool Rtl { get; set; } = true;
    [Parameter] public bool ShowPagination { get; set; } = true;
    [Parameter] public string SearchBarDivCss { get; set; }
    [Parameter] public string SearchBarContentDivCss { get; set; }
    [Parameter] public string NoRecordDivCss { get; set; }
    [Parameter] public string ActionContentDivCss { get; set; }
    [Parameter] public string PagerContentDivCss { get; set; }
    [Parameter] public string DataRowDivCss { get; set; }
    [Parameter] public string HeaderRowDivCss { get; set; }
    [Parameter] public RenderFragment<object?>? ActionContent { get; set; }
    [Parameter] public RenderFragment? SearchBarContent { get; set; }
    [Parameter] public Func<TableState, string, Task<TableData<T>>>? SearchProviderAsync { get; set; }

    [Parameter] public PaginationSettingModel PaginationSetting { get; set; } = new PaginationSettingModel();

    [Parameter] public string NoRecordText { get; set; } = "رکوردی برای نمایش وجود ندارد!";

    [Parameter] public string SearchPlaceHolderText { get; set; } = "جستجو";

    public class PaginationSettingModel
    {
        public string RowsPerPageString { get; set; } = "اندازه صفحه:";
        public string InfoFormat { get; set; } = "{first_item}-{last_item} از {all_items}";
        public string AllItemsText { get; set; } = "همه";
        public HorizontalAlignment HorizontalAlignment { get; set; } = HorizontalAlignment.Center;
    }

    MudTable<T>? table;
    List<(string DisplayText, string Name, bool Sortable)> columns = [];
    string? searchString;

    protected override void OnInitialized()
    {
        if (Model == null)
            Model = JingetObjectFactory<T>.EmptyTableData.Instance;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!Rtl)
        {
            await JS.InvokeVoidAsync("toLtr", id);
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        columns = new List<(string DisplayText, string Name, bool Sortable)>();
        if (Model != null)
        {
            var genericType = Model.GetType().GetGenericArguments().FirstOrDefault();
            Type modelType;
            if (genericType != null)
            {
                modelType = genericType;
            }
            else
            {
                modelType = Model.GetType();
            }
            if (modelType.IsDefined(typeof(JingetTableElement), true))
            {
                var properties = modelType.GetProperties()
                        .Where(x => x.IsDefined(typeof(JingetTableMember), true))
                        .OrderBy(x => x.GetCustomAttribute<JingetTableMember>()?.Order).ToList();

                foreach (var item in properties)
                {
                    var attr = item.GetCustomAttribute<JingetTableMember>();
                    if (attr != null)
                    {
                        var cellColumn = attr.DisplayName;
                        var sortable = attr.Sortable;
                        cellColumn = string.IsNullOrWhiteSpace(cellColumn) ? item.Name : cellColumn;
                        columns.Add((cellColumn, item.Name, sortable));
                    }
                }
            }
        }
        await Task.CompletedTask;
    }

    async Task<TableData<T>> ServerReload(TableState state)
    {
        if (SearchProviderAsync != null)
        {
            if (state.SortDirection == SortDirection.None)
                state.SortDirection = SortDirection.Ascending;
            Model = await SearchProviderAsync.Invoke(state, searchString == null ? "" : searchString);
        }
        return Model == null ? new TableData<T>() : Model;
    }

    void OnSearch(string text)
    {
        searchString = text;
        Reload();
    }

    public void Reload() => table?.ReloadServerData();
}